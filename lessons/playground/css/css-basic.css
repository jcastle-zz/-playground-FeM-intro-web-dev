/* h1 is selector, color is property, red is the value. There are ~350 properties, 150 different colors. Various CSS tricks for colors, styles, and size. One master doc for all CSS selectors.
*/
/* Parents and children - parents will affect children, it cascades. */

h1 {
    font-family: Helvetica;
    color: red;
    font-size: 50px;
    text-align: right;
  }
  
  h2 {
    font-family: Monaco;
    color: seagreen;
    font-size: 40px;
    border: 9px dotted gray;
    text-align: center;
  }
  
  p {
    font-family: Comic Sans MS;
    font-size: 30px;
    background-color: black;
    color: white;
  }
  
  div {
    color: blue;
  }
  
  span {
    color: yellow;
    text-decoration: underline;
    font-style: italic;
  }
  
  ol {
    list-style: upper-roman;
  }
  
  ul {
    list-style: square;
  }
  
  li {
    color: brown;
  }

  /*
  CSS Selectors and Cascading

  Always style on classes (.blog-post), don't style on tags (h1). Err on the side of using classes too much. When two things are same in CSS, the last one wins. The one that comes further down in CSS file wins. Results based on property by property basis.

  Classes that are more specific or having more classes wins.

  Classes are more specific than tags. Style with most classes wins even over tags. Don't mix tags and classes - h1.blog-post.special. Just make it .blog-post.special.

  Don't use ID's and !important. ID's overpower classes. 

  Pseudoclasses - Using CSS to affect state. Hover is most common. .hover-example:hover{} Means both the class and the thing it's hovering over. Focus, active, checked are all common other ones. Only need to call the original class .hover-example the :hover will work when action is take in the browser.

  Structural pseudclass - first-child, last-child, :nth-child(2).

  Wildcard selector (*) - selects every element and styles it. Probably never use this. One use case * { box-sizing: border-box; }. Only need this once, Brian uses on every website. Makes it so you don't have to think about adding padding and borders together. Everything measured in border-box instead of content-box.

  Layout - using CSS for layout.

  Float - don't need this anymore, may see it in older code. Better way to do it is with flex.

  Display modes - a div by default is display block, will take 100% of width and respects padding and margins. Spans by default display in line.
    - Inline - whatever the tag is will behave like text.
    - Block - will respect height, width, margins.
    - Inline-block - hybrid between the two.
    - Flex - Similar to block, super powers on how interior tags are layed out. Allows for fancy layout techniques.
    - Grid - Similar to flex, another approach.
    - Tables - should use for data.
    - Display: none; - to display no style.
  
  The Box Model - Five properties of box model and a complete element:
    - Height - height of box.
    - Width - width of box.
    - Padding - inside the border.
    - Border - edge of the box.
    - Margin - outside the border.

    * Padding, border, margin - inside to outside, in that order.

  Floats - old way of laying things out. Use them when you could not use flex.

  Flex - display:flex - provides for easier layout of boxes.
    - flex-direction: row-reverse; - reverses boxes.
    - flex-direction: column or column-reverse; - boxes go in column. Can also do column reverse.
    - justify-content: flex-end; - move everything to the right.
    - justify-content: flex-start; - move everything left, this is the default.
    - justify-content: center; - move everything to the middle.
    - justify-content: space-between; - provides space between boxes.
    - justify-content: space-around; - provides space between boxes and page sides.
    - justify-content: space-evenly; - provides space evenly.
    - align-items: flex-end; - adjusting vertically, move all boxes to the bottom.
    - align-items: center; - vertically center.
    - align-items: stretch; - stretch content across the div. Can set a height.
    - Can put multiple flex items together - flex-container ai-center reverse js-sa.
    - Flex-wrap - if too many things are on a line it forces a wrap.
    - Can individually move boxes - align-self: flex-end; - can add in order w/ order: 5;

css-patterns.md

When to use the cascade:
- When you want to use same style with minor changes.
- If using cascade, group items together in same file.
- Place comments in CSS file about inheriting style from other class. 
- Helps with DRY - don't repeat yourself

Use Chrome style editor to make updates to CSS in real time and possibly save back to original file.

  */